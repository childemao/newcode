
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子
//  https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&tqId=11218&
tPage=4&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
class Solution{
public:
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
        int *flag = new int[rows*cols];
        for (int i = 0; i < cols*rows; i++) flag[i] = 0;
        for (int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                if (hasPathOne(matrix, i , j, rows, cols, str, 0, flag)){
                    delete []flag;
                    flag = NULL;
                    return true;
                }
            }
        }
        return false;
    }
public:
    bool hasPathOne(char* matrix, int i, int j, int rows, int cols, char* str, int k, int *flag){
        int index = i*cols + j;
        if (i < 0 || j < 0 || i >= rows || j >= cols || flag[index] == 1 || matrix[index] != str[k]) return false;
        if (k == strlen(str)-1) {return true;}
        flag[index] = 1;
        if( hasPathOne(matrix, i-1, j, rows, cols, str, k+1, flag)||
           hasPathOne(matrix, i+1, j, rows, cols, str, k+1, flag)||
           hasPathOne(matrix, i, j-1, rows, cols, str, k+1, flag)||
           hasPathOne(matrix, i, j+1, rows, cols, str, k+1, flag))
            return true;
        flag[index] = 0;
        return false;
    }
};
