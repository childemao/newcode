给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则按字典序打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba

----------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> v;
    
   void dfs(vector<int>& nums, int begin)
    {
      if(begin == nums.size() - 1)
      {
          v.push_back(nums);
          return;
      }
      for(int i = begin; i < nums.size(); i++)
      {
          swap(nums[begin], nums[i]);
          dfs(nums, begin + 1);
          swap(nums[begin],nums[i]);
      }

    }
    vector<vector<int>> permute(vector<int>& nums) {
    dfs(nums, 0);
    return v;
    }
};
----------------------------------------------------------------
class Solution {
public:
    vector<string> v;
    vector<string> Permutation(string str) {
        if(str.size() == 0)
            return v;
        partion(str, 0);
        sort(v.begin(), v.end());
        return v;
    }
    void partion(string str, int begin)
    {
        if(begin == str.size() - 1) 
        {
            v.push_back(str);
            return;
        }
        
        for(int i = begin; str[i] != '\0'; i++)
        {
            if(i != begin && str[begin] == str[i])
                continue;
            swap(str[begin], str[i]);
            partion(str, begin + 1);
            swap(str[begin], str[i]);
        }
    }
};
